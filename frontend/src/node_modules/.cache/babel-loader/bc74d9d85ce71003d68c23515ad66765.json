{"ast":null,"code":"/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\n\"production\" !== process.env.NODE_ENV && function () {\n  function is(x, y) {\n    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;\n  }\n  function useSyncExternalStore$2(subscribe, getSnapshot) {\n    didWarnOld18Alpha || void 0 === React.startTransition || (didWarnOld18Alpha = !0, console.error(\"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.\"));\n    var value = getSnapshot();\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedValue = getSnapshot();\n      objectIs(value, cachedValue) || (console.error(\"The result of getSnapshot should be cached to avoid an infinite loop\"), didWarnUncachedGetSnapshot = !0);\n    }\n    cachedValue = useState({\n      inst: {\n        value: value,\n        getSnapshot: getSnapshot\n      }\n    });\n    var inst = cachedValue[0].inst,\n      forceUpdate = cachedValue[1];\n    useLayoutEffect(function () {\n      inst.value = value;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceUpdate({\n        inst: inst\n      });\n    }, [subscribe, value, getSnapshot]);\n    useEffect(function () {\n      checkIfSnapshotChanged(inst) && forceUpdate({\n        inst: inst\n      });\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceUpdate({\n          inst: inst\n        });\n      });\n    }, [subscribe]);\n    useDebugValue(value);\n    return value;\n  }\n  function checkIfSnapshotChanged(inst) {\n    var latestGetSnapshot = inst.getSnapshot;\n    inst = inst.value;\n    try {\n      var nextValue = latestGetSnapshot();\n      return !objectIs(inst, nextValue);\n    } catch (error) {\n      return !0;\n    }\n  }\n  function useSyncExternalStore$1(subscribe, getSnapshot) {\n    return getSnapshot();\n  }\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n  var React = require(\"react\"),\n    objectIs = \"function\" === typeof Object.is ? Object.is : is,\n    useState = React.useState,\n    useEffect = React.useEffect,\n    useLayoutEffect = React.useLayoutEffect,\n    useDebugValue = React.useDebugValue,\n    didWarnOld18Alpha = !1,\n    didWarnUncachedGetSnapshot = !1,\n    shim = \"undefined\" === typeof window || \"undefined\" === typeof window.document || \"undefined\" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;\n  exports.useSyncExternalStore = void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n}();","map":null,"metadata":{},"sourceType":"script"}
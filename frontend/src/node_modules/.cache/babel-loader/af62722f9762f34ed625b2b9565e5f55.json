{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\n    var prop = _c[_i];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\n// src/query/react/index.ts\nimport { coreModule, buildCreateApi } from \"@reduxjs/toolkit/query\";\n// src/query/react/buildHooks.ts\nimport { createSelector } from \"@reduxjs/toolkit\";\nimport { useCallback, useDebugValue, useEffect as useEffect3, useLayoutEffect, useMemo as useMemo2, useRef as useRef3, useState } from \"react\";\nimport { QueryStatus, skipToken } from \"@reduxjs/toolkit/query\";\nimport { shallowEqual as shallowEqual2 } from \"react-redux\";\n// src/query/react/useSerializedStableValue.ts\nimport { useEffect, useRef, useMemo } from \"react\";\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\n  var incoming = useMemo(function () {\n    return {\n      queryArgs: queryArgs,\n      serialized: typeof queryArgs == \"object\" ? serialize({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      }) : queryArgs\n    };\n  }, [queryArgs, serialize, endpointDefinition, endpointName]);\n  var cache2 = useRef(incoming);\n  useEffect(function () {\n    if (cache2.current.serialized !== incoming.serialized) {\n      cache2.current = incoming;\n    }\n  }, [incoming]);\n  return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;\n}\n// src/query/react/constants.ts\nvar UNINITIALIZED_VALUE = Symbol();\n// src/query/react/useShallowStableValue.ts\nimport { useEffect as useEffect2, useRef as useRef2 } from \"react\";\nimport { shallowEqual } from \"react-redux\";\nfunction useShallowStableValue(value) {\n  var cache2 = useRef2(value);\n  useEffect2(function () {\n    if (!shallowEqual(cache2.current, value)) {\n      cache2.current = value;\n    }\n  }, [value]);\n  return shallowEqual(cache2.current, value) ? cache2.current : value;\n}\n// src/query/defaultSerializeQueryArgs.ts\nimport { isPlainObject } from \"@reduxjs/toolkit\";\nvar cache = WeakMap ? new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = function (_c) {\n  var endpointName = _c.endpointName,\n    queryArgs = _c.queryArgs;\n  var serialized = \"\";\n  var cached = cache == null ? void 0 : cache.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    var stringified = JSON.stringify(queryArgs, function (key, value) {\n      return isPlainObject(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\n        acc[key2] = value[key2];\n        return acc;\n      }, {}) : value;\n    });\n    if (isPlainObject(queryArgs)) {\n      cache == null ? void 0 : cache.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return endpointName + \"(\" + serialized + \")\";\n};\n// src/query/react/buildHooks.ts\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" && !!window.document && !!window.document.createElement ? useLayoutEffect : useEffect3;\nvar defaultMutationStateSelector = function (x) {\n  return x;\n};\nvar noPendingQueryStateSelector = function (selected) {\n  if (selected.isUninitialized) {\n    return __spreadProps(__spreadValues({}, selected), {\n      isUninitialized: false,\n      isFetching: true,\n      isLoading: selected.data !== void 0 ? false : true,\n      status: QueryStatus.pending\n    });\n  }\n  return selected;\n};\nfunction buildHooks(_c) {\n  var api = _c.api,\n    _d = _c.moduleOptions,\n    batch = _d.batch,\n    useDispatch = _d.useDispatch,\n    useSelector = _d.useSelector,\n    useStore = _d.useStore,\n    unstable__sideEffectsInRender = _d.unstable__sideEffectsInRender,\n    serializeQueryArgs = _c.serializeQueryArgs,\n    context = _c.context;\n  var usePossiblyImmediateEffect = unstable__sideEffectsInRender ? function (cb) {\n    return cb();\n  } : useEffect3;\n  return {\n    buildQueryHooks: buildQueryHooks,\n    buildMutationHook: buildMutationHook,\n    usePrefetch: usePrefetch\n  };\n  function queryStatePreSelector(currentState, lastResult, queryArgs) {\n    if ((lastResult == null ? void 0 : lastResult.endpointName) && currentState.isUninitialized) {\n      var endpointName = lastResult.endpointName;\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      if (serializeQueryArgs({\n        queryArgs: lastResult.originalArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      }) === serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      })) lastResult = void 0;\n    }\n    var data = currentState.isSuccess ? currentState.data : lastResult == null ? void 0 : lastResult.data;\n    if (data === void 0) data = currentState.data;\n    var hasData = data !== void 0;\n    var isFetching = currentState.isLoading;\n    var isLoading = !hasData && isFetching;\n    var isSuccess = currentState.isSuccess || isFetching && hasData;\n    return __spreadProps(__spreadValues({}, currentState), {\n      data: data,\n      currentData: currentState.data,\n      isFetching: isFetching,\n      isLoading: isLoading,\n      isSuccess: isSuccess\n    });\n  }\n  function usePrefetch(endpointName, defaultOptions) {\n    var dispatch = useDispatch();\n    var stableDefaultOptions = useShallowStableValue(defaultOptions);\n    return useCallback(function (arg, options) {\n      return dispatch(api.util.prefetch(endpointName, arg, __spreadValues(__spreadValues({}, stableDefaultOptions), options)));\n    }, [endpointName, dispatch, stableDefaultOptions]);\n  }\n  function buildQueryHooks(name) {\n    var useQuerySubscription = function (arg, _c) {\n      var _d = _c === void 0 ? {} : _c,\n        refetchOnReconnect = _d.refetchOnReconnect,\n        refetchOnFocus = _d.refetchOnFocus,\n        refetchOnMountOrArgChange = _d.refetchOnMountOrArgChange,\n        _e = _d.skip,\n        skip = _e === void 0 ? false : _e,\n        _f = _d.pollingInterval,\n        pollingInterval = _f === void 0 ? 0 : _f;\n      var initiate = api.endpoints[name].initiate;\n      var dispatch = useDispatch();\n      var stableArg = useStableQueryArgs(skip ? skipToken : arg, defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\n      var stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect: refetchOnReconnect,\n        refetchOnFocus: refetchOnFocus,\n        pollingInterval: pollingInterval\n      });\n      var lastRenderHadSubscription = useRef3(false);\n      var promiseRef = useRef3();\n      var _g = promiseRef.current || {},\n        queryCacheKey = _g.queryCacheKey,\n        requestId = _g.requestId;\n      var currentRenderHasSubscription = false;\n      if (queryCacheKey && requestId) {\n        var returnedValue = dispatch(api.internalActions.internal_probeSubscription({\n          queryCacheKey: queryCacheKey,\n          requestId: requestId\n        }));\n        if (process.env.NODE_ENV !== \"production\") {\n          if (typeof returnedValue !== \"boolean\") {\n            throw new Error(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\n    You must add the middleware for RTK-Query to function correctly!\");\n          }\n        }\n        currentRenderHasSubscription = !!returnedValue;\n      }\n      var subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\n      usePossiblyImmediateEffect(function () {\n        lastRenderHadSubscription.current = currentRenderHasSubscription;\n      });\n      usePossiblyImmediateEffect(function () {\n        if (subscriptionRemoved) {\n          promiseRef.current = void 0;\n        }\n      }, [subscriptionRemoved]);\n      usePossiblyImmediateEffect(function () {\n        var _a;\n        var lastPromise = promiseRef.current;\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"removeMeOnCompilation\") {\n          console.log(subscriptionRemoved);\n        }\n        if (stableArg === skipToken) {\n          lastPromise == null ? void 0 : lastPromise.unsubscribe();\n          promiseRef.current = void 0;\n          return;\n        }\n        var lastSubscriptionOptions = (_a = promiseRef.current) == null ? void 0 : _a.subscriptionOptions;\n        if (!lastPromise || lastPromise.arg !== stableArg) {\n          lastPromise == null ? void 0 : lastPromise.unsubscribe();\n          var promise = dispatch(initiate(stableArg, {\n            subscriptionOptions: stableSubscriptionOptions,\n            forceRefetch: refetchOnMountOrArgChange\n          }));\n          promiseRef.current = promise;\n        } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [dispatch, initiate, refetchOnMountOrArgChange, stableArg, stableSubscriptionOptions, subscriptionRemoved]);\n      useEffect3(function () {\n        return function () {\n          var _a;\n          (_a = promiseRef.current) == null ? void 0 : _a.unsubscribe();\n          promiseRef.current = void 0;\n        };\n      }, []);\n      return useMemo2(function () {\n        return {\n          refetch: function () {\n            var _a;\n            if (!promiseRef.current) throw new Error(\"Cannot refetch a query that has not been started yet.\");\n            return (_a = promiseRef.current) == null ? void 0 : _a.refetch();\n          }\n        };\n      }, []);\n    };\n    var useLazyQuerySubscription = function (_c) {\n      var _d = _c === void 0 ? {} : _c,\n        refetchOnReconnect = _d.refetchOnReconnect,\n        refetchOnFocus = _d.refetchOnFocus,\n        _e = _d.pollingInterval,\n        pollingInterval = _e === void 0 ? 0 : _e;\n      var initiate = api.endpoints[name].initiate;\n      var dispatch = useDispatch();\n      var _f = useState(UNINITIALIZED_VALUE),\n        arg = _f[0],\n        setArg = _f[1];\n      var promiseRef = useRef3();\n      var stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect: refetchOnReconnect,\n        refetchOnFocus: refetchOnFocus,\n        pollingInterval: pollingInterval\n      });\n      usePossiblyImmediateEffect(function () {\n        var _a, _b;\n        var lastSubscriptionOptions = (_a = promiseRef.current) == null ? void 0 : _a.subscriptionOptions;\n        if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          (_b = promiseRef.current) == null ? void 0 : _b.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [stableSubscriptionOptions]);\n      var subscriptionOptionsRef = useRef3(stableSubscriptionOptions);\n      usePossiblyImmediateEffect(function () {\n        subscriptionOptionsRef.current = stableSubscriptionOptions;\n      }, [stableSubscriptionOptions]);\n      var trigger = useCallback(function (arg2, preferCacheValue) {\n        if (preferCacheValue === void 0) {\n          preferCacheValue = false;\n        }\n        var promise;\n        batch(function () {\n          var _a;\n          (_a = promiseRef.current) == null ? void 0 : _a.unsubscribe();\n          promiseRef.current = promise = dispatch(initiate(arg2, {\n            subscriptionOptions: subscriptionOptionsRef.current,\n            forceRefetch: !preferCacheValue\n          }));\n          setArg(arg2);\n        });\n        return promise;\n      }, [dispatch, initiate]);\n      useEffect3(function () {\n        return function () {\n          var _a;\n          (_a = promiseRef == null ? void 0 : promiseRef.current) == null ? void 0 : _a.unsubscribe();\n        };\n      }, []);\n      useEffect3(function () {\n        if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n          trigger(arg, true);\n        }\n      }, [arg, trigger]);\n      return useMemo2(function () {\n        return [trigger, arg];\n      }, [trigger, arg]);\n    };\n    var useQueryState = function (arg, _c) {\n      var _d = _c === void 0 ? {} : _c,\n        _e = _d.skip,\n        skip = _e === void 0 ? false : _e,\n        selectFromResult = _d.selectFromResult;\n      var select = api.endpoints[name].select;\n      var stableArg = useStableQueryArgs(skip ? skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\n      var lastValue = useRef3();\n      var selectDefaultResult = useMemo2(function () {\n        return createSelector([select(stableArg), function (_, lastResult) {\n          return lastResult;\n        }, function (_) {\n          return stableArg;\n        }], queryStatePreSelector);\n      }, [select, stableArg]);\n      var querySelector = useMemo2(function () {\n        return selectFromResult ? createSelector([selectDefaultResult], selectFromResult) : selectDefaultResult;\n      }, [selectDefaultResult, selectFromResult]);\n      var currentState = useSelector(function (state) {\n        return querySelector(state, lastValue.current);\n      }, shallowEqual2);\n      var store = useStore();\n      var newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n      useIsomorphicLayoutEffect(function () {\n        lastValue.current = newLastValue;\n      }, [newLastValue]);\n      return currentState;\n    };\n    return {\n      useQueryState: useQueryState,\n      useQuerySubscription: useQuerySubscription,\n      useLazyQuerySubscription: useLazyQuerySubscription,\n      useLazyQuery: function (options) {\n        var _c = useLazyQuerySubscription(options),\n          trigger = _c[0],\n          arg = _c[1];\n        var queryStateResults = useQueryState(arg, __spreadProps(__spreadValues({}, options), {\n          skip: arg === UNINITIALIZED_VALUE\n        }));\n        var info = useMemo2(function () {\n          return {\n            lastArg: arg\n          };\n        }, [arg]);\n        return useMemo2(function () {\n          return [trigger, queryStateResults, info];\n        }, [trigger, queryStateResults, info]);\n      },\n      useQuery: function (arg, options) {\n        var querySubscriptionResults = useQuerySubscription(arg, options);\n        var queryStateResults = useQueryState(arg, __spreadValues({\n          selectFromResult: arg === skipToken || (options == null ? void 0 : options.skip) ? void 0 : noPendingQueryStateSelector\n        }, options));\n        var data = queryStateResults.data,\n          status = queryStateResults.status,\n          isLoading = queryStateResults.isLoading,\n          isSuccess = queryStateResults.isSuccess,\n          isError = queryStateResults.isError,\n          error = queryStateResults.error;\n        useDebugValue({\n          data: data,\n          status: status,\n          isLoading: isLoading,\n          isSuccess: isSuccess,\n          isError: isError,\n          error: error\n        });\n        return useMemo2(function () {\n          return __spreadValues(__spreadValues({}, queryStateResults), querySubscriptionResults);\n        }, [queryStateResults, querySubscriptionResults]);\n      }\n    };\n  }\n  function buildMutationHook(name) {\n    return function (_c) {\n      var _d = _c === void 0 ? {} : _c,\n        _e = _d.selectFromResult,\n        selectFromResult = _e === void 0 ? defaultMutationStateSelector : _e,\n        fixedCacheKey = _d.fixedCacheKey;\n      var _f = api.endpoints[name],\n        select = _f.select,\n        initiate = _f.initiate;\n      var dispatch = useDispatch();\n      var _g = useState(),\n        promise = _g[0],\n        setPromise = _g[1];\n      useEffect3(function () {\n        return function () {\n          if (!(promise == null ? void 0 : promise.arg.fixedCacheKey)) {\n            promise == null ? void 0 : promise.reset();\n          }\n        };\n      }, [promise]);\n      var triggerMutation = useCallback(function (arg) {\n        var promise2 = dispatch(initiate(arg, {\n          fixedCacheKey: fixedCacheKey\n        }));\n        setPromise(promise2);\n        return promise2;\n      }, [dispatch, initiate, fixedCacheKey]);\n      var requestId = (promise || {}).requestId;\n      var mutationSelector = useMemo2(function () {\n        return createSelector([select({\n          fixedCacheKey: fixedCacheKey,\n          requestId: promise == null ? void 0 : promise.requestId\n        })], selectFromResult);\n      }, [select, promise, selectFromResult, fixedCacheKey]);\n      var currentState = useSelector(mutationSelector, shallowEqual2);\n      var originalArgs = fixedCacheKey == null ? promise == null ? void 0 : promise.arg.originalArgs : void 0;\n      var reset = useCallback(function () {\n        batch(function () {\n          if (promise) {\n            setPromise(void 0);\n          }\n          if (fixedCacheKey) {\n            dispatch(api.internalActions.removeMutationResult({\n              requestId: requestId,\n              fixedCacheKey: fixedCacheKey\n            }));\n          }\n        });\n      }, [dispatch, fixedCacheKey, promise, requestId]);\n      var endpointName = currentState.endpointName,\n        data = currentState.data,\n        status = currentState.status,\n        isLoading = currentState.isLoading,\n        isSuccess = currentState.isSuccess,\n        isError = currentState.isError,\n        error = currentState.error;\n      useDebugValue({\n        endpointName: endpointName,\n        data: data,\n        status: status,\n        isLoading: isLoading,\n        isSuccess: isSuccess,\n        isError: isError,\n        error: error\n      });\n      var finalState = useMemo2(function () {\n        return __spreadProps(__spreadValues({}, currentState), {\n          originalArgs: originalArgs,\n          reset: reset\n        });\n      }, [currentState, originalArgs, reset]);\n      return useMemo2(function () {\n        return [triggerMutation, finalState];\n      }, [triggerMutation, finalState]);\n    };\n  }\n}\n// src/query/endpointDefinitions.ts\nvar DefinitionType;\n(function (DefinitionType2) {\n  DefinitionType2[\"query\"] = \"query\";\n  DefinitionType2[\"mutation\"] = \"mutation\";\n})(DefinitionType || (DefinitionType = {}));\nfunction isQueryDefinition(e) {\n  return e.type === DefinitionType.query;\n}\nfunction isMutationDefinition(e) {\n  return e.type === DefinitionType.mutation;\n}\n// src/query/utils/capitalize.ts\nfunction capitalize(str) {\n  return str.replace(str[0], str[0].toUpperCase());\n}\n// src/query/tsHelpers.ts\nfunction safeAssign(target) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  Object.assign.apply(Object, __spreadArray([target], args));\n}\n// src/query/react/module.ts\nimport { useDispatch as rrUseDispatch, useSelector as rrUseSelector, useStore as rrUseStore, batch as rrBatch } from \"react-redux\";\nvar reactHooksModuleName = /* @__PURE__ */Symbol();\nvar reactHooksModule = function (_c) {\n  var _d = _c === void 0 ? {} : _c,\n    _e = _d.batch,\n    batch = _e === void 0 ? rrBatch : _e,\n    _f = _d.useDispatch,\n    useDispatch = _f === void 0 ? rrUseDispatch : _f,\n    _g = _d.useSelector,\n    useSelector = _g === void 0 ? rrUseSelector : _g,\n    _h = _d.useStore,\n    useStore = _h === void 0 ? rrUseStore : _h,\n    _j = _d.unstable__sideEffectsInRender,\n    unstable__sideEffectsInRender = _j === void 0 ? false : _j;\n  return {\n    name: reactHooksModuleName,\n    init: function (api, _c, context) {\n      var serializeQueryArgs = _c.serializeQueryArgs;\n      var anyApi = api;\n      var _d = buildHooks({\n          api: api,\n          moduleOptions: {\n            batch: batch,\n            useDispatch: useDispatch,\n            useSelector: useSelector,\n            useStore: useStore,\n            unstable__sideEffectsInRender: unstable__sideEffectsInRender\n          },\n          serializeQueryArgs: serializeQueryArgs,\n          context: context\n        }),\n        buildQueryHooks = _d.buildQueryHooks,\n        buildMutationHook = _d.buildMutationHook,\n        usePrefetch = _d.usePrefetch;\n      safeAssign(anyApi, {\n        usePrefetch: usePrefetch\n      });\n      safeAssign(context, {\n        batch: batch\n      });\n      return {\n        injectEndpoint: function (endpointName, definition) {\n          if (isQueryDefinition(definition)) {\n            var _c = buildQueryHooks(endpointName),\n              useQuery = _c.useQuery,\n              useLazyQuery = _c.useLazyQuery,\n              useLazyQuerySubscription = _c.useLazyQuerySubscription,\n              useQueryState = _c.useQueryState,\n              useQuerySubscription = _c.useQuerySubscription;\n            safeAssign(anyApi.endpoints[endpointName], {\n              useQuery: useQuery,\n              useLazyQuery: useLazyQuery,\n              useLazyQuerySubscription: useLazyQuerySubscription,\n              useQueryState: useQueryState,\n              useQuerySubscription: useQuerySubscription\n            });\n            api[\"use\" + capitalize(endpointName) + \"Query\"] = useQuery;\n            api[\"useLazy\" + capitalize(endpointName) + \"Query\"] = useLazyQuery;\n          } else if (isMutationDefinition(definition)) {\n            var useMutation = buildMutationHook(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useMutation: useMutation\n            });\n            api[\"use\" + capitalize(endpointName) + \"Mutation\"] = useMutation;\n          }\n        }\n      };\n    }\n  };\n};\n// src/query/react/index.ts\nexport * from \"@reduxjs/toolkit/query\";\n// src/query/react/ApiProvider.tsx\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { useEffect as useEffect4 } from \"react\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nfunction ApiProvider(props) {\n  var store = React.useState(function () {\n    var _c;\n    return configureStore({\n      reducer: (_c = {}, _c[props.api.reducerPath] = props.api.reducer, _c),\n      middleware: function (gDM) {\n        return gDM().concat(props.api.middleware);\n      }\n    });\n  })[0];\n  useEffect4(function () {\n    return props.setupListeners === false ? void 0 : setupListeners(store.dispatch, props.setupListeners);\n  }, [props.setupListeners, store.dispatch]);\n  return /* @__PURE__ */React.createElement(Provider, {\n    store: store,\n    context: props.context\n  }, props.children);\n}\n// src/query/react/index.ts\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule(), reactHooksModule());\nexport { ApiProvider, createApi, reactHooksModule, reactHooksModuleName };","map":null,"metadata":{},"sourceType":"module"}